/////////////////////////////////////////////////////
/////////////////// MAIN.CPP ////////////////////////
/////////////////////////////////////////////////////

/*
 *     SocialLedge.com - Copyright (C) 2013
 *
 *     This file is part of free software framework for embedded processors.
 *     You can use it and/or distribute it as long as this copyright header
 *     remains unmodified.  The code is free for personal use and requires
 *     permission to use in a commercial product.
 *
 *      THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 *      OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 *      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 *      I SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 *      CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 *     You can reach the author of this software at :
 *          p r e e t . w i k i @ g m a i l . c o m
 */

/**
 * @file
 * @brief This is the application entry point.
 * 			FreeRTOS and stdio printf is pre-configured to use uart0_min.h before main() enters.
 * 			@see L0_LowLevel/lpc_sys.h if you wish to override printf/scanf functions.
 *
 */
#include <stdio.h>
#include "tasks.hpp"
#include "utilities.h"
#include "io.hpp"
#include "uart0_min.h"  //uart0_puts("UH")
#include "LPC17xx.h"
#include "cstdint"
#include <stdlib.h>
#include <unistd.h>
#include "ADCDriver.hpp"
#include "PWMDriver.hpp"



inline bool CHECK_BIT(int var, int pos)
{
    return (bool)(var & (1 << pos));
}

void vTaskLED(void * pvParameters)
{
    ADCDriver * adcDriver = static_cast<ADCDriver *>(pvParameters);
    float rawData;
    float rBrightness = 0, gBrightness = 0, bBrightness = 0;
    PWMDriver PWMr, PWMg, PWMb;

    PWMr.pwmSelectPin(0);
    PWMr.pwmInitSingleEdgeMode(100);

    PWMg.pwmSelectPin(1);
    PWMg.pwmInitSingleEdgeMode(100);

    PWMb.pwmSelectPin(2);
    PWMb.pwmInitSingleEdgeMode(100);


    uint8_t mode = 1;
    int count = 0;
    float voltage = 0;
    while(1)
    {   
        vTaskDelay(1);
        count++;
        if(count == 1000)
        {
            voltage = rawData/29.57;
            printf("ADC voltage: %f\n", voltage);
            printf("Red Duty Cycle: %f,\n Green Duty Cycle: %f,\n Blue Duty Cycle: %f\n", (100 - rBrightness), (100 - gBrightness), (100 - bBrightness));
            count = 0;
        }
        //vTaskDelay(1000);
        if(SW.getSwitch(1))
        {
            mode = 1;
        }
        else if(SW.getSwitch(2))
        {
            mode = 2;
        }
        else if(SW.getSwitch(3))
        {
            mode = 3;
        }

        switch(mode)
        {
            case 1:
                 LPC_PINCON->PINSEL4 &= 0;      //deselect all colors
                 break;
            case 2:
                PWMr.pwmSelectPin(0);
                PWMg.pwmSelectPin(1);
                PWMb.pwmSelectPin(2);
                rawData = (adcDriver->readADCRawByChannel(3));
                //printf("rawData: %f", rawData);
                rawData = rawData/42;
                rBrightness = rawData;
                bBrightness = 100 - rawData;
                if(rawData <= 50)
                {
                    gBrightness = 100 - (2 * rBrightness);
                }
                else if(rawData > 50)
                {
                    gBrightness = 100 - (2 * bBrightness);
                }

                PWMr.setDutyCycle(0, rBrightness);
                PWMg.setDutyCycle(1, gBrightness);
                PWMb.setDutyCycle(2, bBrightness);
                //printf("rBrightness: %f, gBrightness: %f, bBrightness: %f\n", rBrightness, gBrightness, bBrightness);
                break;
            case 3:
                LPC_PINCON->PINSEL4 = 0x10;    //turn off all but blue pwm
                vTaskDelay(100);
                rawData = (adcDriver->readADCRawByChannel(3))/42;
                bBrightness = rawData;

                PWMb.setDutyCycle(2, bBrightness);
                printf("bBrightness: %f\n", bBrightness);
                break;
            default:
                mode = 1;
                break;
        }
        /*
        if(SW.getSwitch(1))
        {
            vTaskDelay(100);
            while(!SW.getSwitch(1))
            {
                vTaskDelay(100);
                LPC_PINCON->PINSEL4 &= 0;
            }
            PWMr.pwmSelectPin(0);
            PWMg.pwmSelectPin(1);
            PWMb.pwmSelectPin(2);
        }
        else if(SW.getSwitch(2))
        {
            //vTaskDelay(100);
            while(!SW.getSwitch(2))
            {
                //vTaskDelay(100);
                rawData = (adcDriver->readADCRawByChannel(3))/42;
                rBrightness = rawData;
                bBrightness = 100 - rawData;
                if(rawData <= 50)
                {
                    gBrightness = 100 - (2 * rBrightness);
                }
                else if(rawData > 50)
                {
                    gBrightness = 100 - (2 * bBrightness);
                }

                PWMr.setDutyCycle(0, rBrightness);
                PWMg.setDutyCycle(1, gBrightness);
                PWMb.setDutyCycle(2, bBrightness);
                printf("rBrightness: %f, gBrightness: %f, bBrightness: %f\n", rBrightness, gBrightness, bBrightness);
            }
        }
        else if(SW.getSwitch(3))
        {
            //vTaskDelay(100);
            LPC_PINCON->PINSEL4 = 1;    //turn off all but first pwm
            while(!SW.getSwitch(3))
            {
                vTaskDelay(100);
                rawData = (adcDriver->readADCRawByChannel(3))/42;
                rBrightness = rawData;

                PWMr.setDutyCycle(0, rBrightness);
                printf("rBrightness: %f, gBrightness: %f, bBrightness: %f\n", rBrightness, gBrightness, bBrightness);
            }
            PWMg.pwmSelectPin(1);       //turn back on green and blue
            PWMb.pwmSelectPin(2);
        }
*/
    }

}


int main(void)
{
    ADCDriver * frontSeat;
    frontSeat->adcInitBurstMode(3);
    frontSeat->adcSelectPin(3);

    scheduler_add_task(new terminalTask(PRIORITY_HIGH));
	xTaskCreate(vTaskLED, "vTaskLED", 512, ( void * ) frontSeat, 1, NULL );

    //xTaskCreate(vTaskPrint, "vTaskPrint", 512, ( void * ) 'A', 1, NULL );
    // Alias to vSchedulerStart();
    scheduler_start();
    return -1;
}
#ifndef PWM_DRIVER_H_
#define PWM_DRIVER_H_

#include "stdint.h"
#include "LPC17xx.h"
  
class PWMDriver
{
public:
    enum PWM_PIN
    {
        PWM_PIN_2_0 = 0,    // PWM1.1
        PWM_PIN_2_1 = 1,    // PWM1.2
        PWM_PIN_2_2 = 2,    // PWM1.3
        PWM_PIN_2_3,    // PWM1.4
        PWM_PIN_2_4,    // PWM1.5
        PWM_PIN_2_5,    // PWM1.6
    };

    /**
    * Nothing needs to be done within the default constructor
    */
    PWMDriver() {}

    /**
    * 1) Select PWM functionality on all PWM-able pins.
    */  
    void pwmSelectAllPins();
  
	/**
    * 1) Select PWM functionality of pwm_pin_arg
    *
    * @param pwm_pin_arg is the PWM_PIN enumeration of the desired pin.
    */
    void pwmSelectPin(uint8_t pwm_pin_arg);
  
    /**
    * 1) Power up the PWM peripheral
    * 2) Set the PWM clock to divide by 1 (to simplify frequency calculation
    * 3) Enable timer and prescalar counters. Enable PWM Mode
    * 4) Configure Counter to reset when MR0 is matched (i.e. MR0 represents frequency)
    * 5) Disable all capture features
    * 6) Enable Timer mode and disable counter/capture modes
    * 7) Enable single edge mode
    * 8) Enable output on all six pwm channels
    * 9) Set frequency
    * 10) Set all pwm channels to zero duty cycle
    *
    * @param frequency_Hz is the initial frequency in Hz. 
    */
    void pwmInitSingleEdgeMode(uint32_t frequency_Hz);

	/**
    * 1) Convert duty_cycle_percentage to the appropriate match register value (depends on current frequency)
    * 2) Assign the above value to the appropriate MRn register (depends on pwm_pin_arg)
    *
    * @param pwm_pin_arg is the PWM_PIN enumeration of the desired pin.
    * @param duty_cycle_percentage is the desired duty cycle percentage.
    */
	void setDutyCycle(uint8_t pwm_pin_arg, float duty_cycle_percentage);
  
	/**
    * 1) Convert frequency_Hz to the appropriate match register value
    * 2) Assign the above value to MR0
    *
    * @param frequency_hz is the desired frequency of all pwm pins
    */  	
	void setFrequency(uint32_t frequency_Hz);
};

#endif#include <PWMDriver.hpp>
enum PWM_PIN
{
    PWM_PIN_2_0,    // PWM1.1
    PWM_PIN_2_1,    // PWM1.2
    PWM_PIN_2_2,    // PWM1.3
    PWM_PIN_2_3,    // PWM1.4
    PWM_PIN_2_4,    // PWM1.5
    PWM_PIN_2_5,    // PWM1.6
};


/**
* 1) Select PWM functionality on all PWM-able pins.
*/  
void pwmSelectAllPins()
{
    LPC_PINCON->PINSEL4 = (1 << 0) | (1 << 2) | (1 << 4) | (1 << 6) | (1 << 8) | (1 << 10);

}

/**
* 1) Select PWM functionality of pwm_pin_arg
*
* @param pwm_pin_arg is the PWM_PIN enumeration of the desired pin.
*/
void PWMDriver::pwmSelectPin(uint8_t pwm_pin_arg)
{
    switch(pwm_pin_arg)
    {
        case 0:
            LPC_PINCON->PINSEL4 |= 1;
            LPC_PINCON->PINSEL4 &= ~(1 << 1);
            break;
        case 1:
            LPC_PINCON->PINSEL4 |= (1 << 2);
            LPC_PINCON->PINSEL4 &= ~(1 << 3);
            break;
        case 2:
            LPC_PINCON->PINSEL4 |= (1 << 4);
            LPC_PINCON->PINSEL4 &= ~(1 << 5);
            break;
        case 3:
            LPC_PINCON->PINSEL4 |= (1 << 6);
            LPC_PINCON->PINSEL4 &= ~(1 << 7);
            break;
        case 4:
            LPC_PINCON->PINSEL4 |= (1 << 8);
            LPC_PINCON->PINSEL4 &= ~(1 << 9);
            break;
        case 5:
            LPC_PINCON->PINSEL4 |= (1 << 10);
            LPC_PINCON->PINSEL4 &= ~(1 << 11);
            break;
        default:
            LPC_PINCON->PINSEL4 |= 1;
            LPC_PINCON->PINSEL4 &= ~(1 << 1);
            break;
    }
}

/**
* 1) Power up the PWM peripheral
* 2) Set the PWM clock to divide by 1 (to simplify frequency calculation
* 3) Enable timer and prescalar counters. Enable PWM Mode
* 4) Configure Counter to reset when MR0 is matched (i.e. MR0 represents frequency)
* 5) Disable all capture features
* 6) Enable Timer mode and disable counter/capture modes
* 7) Enable single edge mode
* 8) Enable output on all six pwm channels
* 9) Set frequency
* 10) Set all pwm channels to zero duty cycle
*
* @param frequency_Hz is the initial frequency in Hz. 
*/
void PWMDriver::pwmInitSingleEdgeMode(uint32_t frequency_Hz)
{
    LPC_SC->PCONP |= (1 << 6);          //power up pwm peripheral
        
    LPC_SC->PCLKSEL0 |= (1 << 13);      //select clock = pckl/8 (01)
    LPC_SC->PCLKSEL0 |= (1 << 12);
    
    LPC_PWM1->TCR |= 1;                 //enable counter mode
    LPC_PWM1->TCR |= (1 << 2);          //PWM enable

    LPC_PWM1->MCR |= (1 << 1);

    setFrequency(frequency_Hz);

    LPC_PWM1->LER |= (1 << 0) | (1 << 1) | (1 << 2) | (1 << 3) | (1 << 4);    //put new value into MR1 for next cycle
    
    LPC_SC->PCLKSEL0 &= ~(1 << 13);      //select clock = pckl/1 (01)
    LPC_SC->PCLKSEL0 |= (1 << 12);

    LPC_PWM1->PCR |= (1 << 9) | (1 << 10) | (1 << 11) | (1 << 12) | (1 << 13) | (1 << 14) | (1 << 15);           //enable pwm output for pwm1 bits 9-14 set
    
    //
}

/**
* 1) Convert duty_cycle_percentage to the appropriate match register value (depends on current frequency)
* 2) Assign the above value to the appropriate MRn register (depends on pwm_pin_arg)
*
* @param pwm_pin_arg is the PWM_PIN enumeration of the desired pin.
* @param duty_cycle_percentage is the desired duty cycle percentage.
*/
void PWMDriver::setDutyCycle(uint8_t pwm_pin_arg, float duty_cycle_percentage)
{
    switch(pwm_pin_arg)
    {
        case 0:
            LPC_PWM1->MR1 = duty_cycle_percentage;   // convert 0-4095 to 0-100
            break;
        case 1:
            LPC_PWM1->MR2 = duty_cycle_percentage;
            break;
        case 2:
            LPC_PWM1->MR3 = duty_cycle_percentage;
            break;
        case 3:
            LPC_PWM1->MR4 = duty_cycle_percentage;
            break;
        case 4:
            LPC_PWM1->MR5 = duty_cycle_percentage;
            break;
        case 5:
            LPC_PWM1->MR6 = duty_cycle_percentage;
            break;
        default:
            LPC_PWM1->MR1 = duty_cycle_percentage;
            break;
    }
}

/**
* 1) Convert frequency_Hz to the appropriate match register value
* 2) Assign the above value to MR0
*
* @param frequency_hz is the desired frequency of all pwm pins
*/  	
void PWMDriver::setFrequency(uint32_t frequency_Hz)
{
    LPC_PWM1->MR0 = frequency_Hz;       //cycle time 
}
#include <ADCDriver.hpp>
/*
enum ADC_PIN
{
    ADC_PIN_0_23 = 0,   // AD0.0
    ADC_PIN_0_24,       // AD0.1
    ADC_PIN_0_25,       // AD0.2
    ADC_PIN_0_26,       // AD0.3
    ADC_PIN_1_30,       // AD0.4
    ADC_PIN_1_31,       // AD0.5
    ADC_PIN_0_3,        // AD0.6
    ADC_PIN_0_2         // AD0.7
};
*/

/**
* Nothing needs to be done within the default constructor
*/
ADCDriver::ADCDriver(){}

/**
* 1) Powers up ADC peripheral
* 2) Set peripheral clock
* 2) Enable ADC
* 3) Select ADC channels
* 4) Enable burst mode
*
* @param channels_to_enable (optional param) bit mask to enable up to 8 ADC channels
*/
void ADCDriver::adcInitBurstMode(uint8_t channels_to_enable)
{
    LPC_SC->PCONP |= (1 << 12);     //power up ADC
    LPC_ADC->ADCR |= (1 << 11);     //enable ADC

    LPC_SC->PCLKSEL0 |= (1 << 24);  //PCLK_peripheral = CLK/8 (00)
    LPC_SC->PCLKSEL0 |= (1 << 25);

    LPC_ADC->ADCR &= ~(0xFF);       //clear all channels
    LPC_ADC->ADCR |= (1 << 3);       //select channel 3 (p0.26)

    LPC_ADC->ADCR |= (1 << 16);     //enable burst mode
}

/**
* 1) Selects ADC functionality of any of the 8 pins that are ADC capable
* 
* @param adc_pin_arg is the ADC_PIN enumeration of the desired pin.
*
* WARNING: For proper operation of the SJOne board, do NOT configure any pins
*           as ADC except for 0.26, 1.31, 1.30
*/
void ADCDriver::adcSelectPin(uint8_t adc_pin_arg)//3 digit number for port pin pin
{
    if(adc_pin_arg == 3)
    {
        LPC_PINCON->PINSEL1 |= (1 << 20);   //select p0.26 as adc (01)
        LPC_PINCON->PINSEL1 &= ~(1 << 21);
    }
    else if(adc_pin_arg == 4)
    {
        LPC_PINCON->PINSEL3 |= (1 << 28);   //select p1.30 as adc (11)
        LPC_PINCON->PINSEL3 |= (1 << 29);
    }
    else if(adc_pin_arg == 5)
    {
        LPC_PINCON->PINSEL3 |= (1 << 30);   //select p1.31 as adc (11)
        LPC_PINCON->PINSEL3 &= (1 << 31);
    }
    else
    {
        //wong pin
    }
}

/**
* 1) Returns the value of the 12bit register reading of a given ADC pin
*
* @param adc_pin_arg is the ADC_PIN enumeration of the desired pin.
*/
uint16_t ADCDriver::readADCRawByPin(uint8_t adc_pin_arg)//not done
{
    uint16_t rawData;

    if(adc_pin_arg == 3)
    {
        rawData = (LPC_ADC->ADDR3 >> 4) & 0xFFF;
    }
    else if(adc_pin_arg == 4)
    {
        rawData = (LPC_ADC->ADDR4 >> 4) & 0xFFF;
    }
    else if(adc_pin_arg == 5)
    {
        rawData = (LPC_ADC->ADDR5 >> 4) & 0xFFF;
    }
    else
    {
        //wong pin
    }
    return rawData;   
}

/**
* 1) Returns the value of the 12bit register reading of a given ADC channel
*
* @param adc_channel_arg is the number (0 through 7) of the desired ADC channel.
*/
uint16_t ADCDriver::readADCRawByChannel(uint8_t adc_channel_arg)
{
    uint16_t rawData;

    if(adc_channel_arg == 3)
    {
        rawData = (LPC_ADC->ADDR3 >> 4) & 0xFFF;
    }
    else if(adc_channel_arg == 4)
    {
        rawData = (LPC_ADC->ADDR4 >> 4) & 0xFFF;
    }
    else if(adc_channel_arg == 5)
    {
        rawData = (LPC_ADC->ADDR5 >> 4) & 0xFFF;
    }
    else
    {
        //wong pin
    }
    return rawData;    
}

/**
* 1) Returns the voltage reading of a given ADC pin
*
* @param adc_pin_arg is the ADC_PIN enumeration of the desired pin.
*/
float ADCDriver::readADCVoltageByPin(uint8_t adc_pin_arg)
{
    float voltage = readADCRawByPin(adc_pin_arg);
    voltage = voltage/29.57;
    return voltage;
}

/**
* 1) Returns the voltage reading of a given ADC channel
*
* @param adc_channel_arg is the number (0 through 7) of the desired ADC channel.
*/
float ADCDriver::readADCVoltageByChannel(uint8_t adc_channel_arg)
{
    float voltage = readADCRawByChannel(adc_channel_arg);
    voltage = voltage/29.57;
    return voltage;
}#ifndef ADC_DRIVER_H_
#define ADC_DRIVER_H_

#include "stdio.h"
#include "io.hpp"


class ADCDriver
{
public:
    enum ADC_PIN
    {
        ADC_PIN_0_23 = 0,   // AD0.0
        ADC_PIN_0_24,       // AD0.1
        ADC_PIN_0_25,       // AD0.2
        ADC_PIN_0_26,       // AD0.3
        ADC_PIN_1_30,       // AD0.4
        ADC_PIN_1_31,       // AD0.5
        ADC_PIN_0_3,        // AD0.6
        ADC_PIN_0_2         // AD0.7
    };

    /**
    * Nothing needs to be done within the default constructor
    */
    ADCDriver();
    
    /**
    * 1) Powers up ADC peripheral
    * 2) Set peripheral clock
    * 2) Enable ADC
    * 3) Select ADC channels
    * 4) Enable burst mode
    *
    * @param channels_to_enable (optional param) bit mask to enable up to 8 ADC channels
    */
    void adcInitBurstMode(uint8_t channels_to_enable = 0xFF);

    /**
    * 1) Selects ADC functionality of any of the 8 pins that are ADC capable
    * 
    * @param adc_pin_arg is the ADC_PIN enumeration of the desired pin.
    *
    * WARNING: For proper operation of the SJOne board, do NOT configure any pins
    *           as ADC except for 0.26, 1.31, 1.30
    */
    void adcSelectPin(uint8_t adc_pin_arg);
    
    /**
    * 1) Returns the value of the 12bit register reading of a given ADC pin
    *
    * @param adc_pin_arg is the ADC_PIN enumeration of the desired pin.
    */
    uint16_t readADCRawByPin(uint8_t adc_pin_arg);
    
    /**
    * 1) Returns the value of the 12bit register reading of a given ADC channel
    *
    * @param adc_channel_arg is the number (0 through 7) of the desired ADC channel.
    */
    uint16_t readADCRawByChannel(uint8_t adc_channel_arg);
    
    /**
    * 1) Returns the voltage reading of a given ADC pin
    *
    * @param adc_pin_arg is the ADC_PIN enumeration of the desired pin.
    */
    float readADCVoltageByPin(uint8_t adc_pin_arg);
    
    /**
    * 1) Returns the voltage reading of a given ADC channel
    *
    * @param adc_channel_arg is the number (0 through 7) of the desired ADC channel.
    */
    float readADCVoltageByChannel(uint8_t adc_channel_arg);
};

#endif